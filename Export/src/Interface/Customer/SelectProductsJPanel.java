/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Customer;
import Business.Airline.Flight;
import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Supplier.Product;
import Business.User.User;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class SelectProductsJPanel extends javax.swing.JPanel {
    private JPanel upc;
    private Customer customer;
    private EcoSystem business;
    private Flight flight;
    private Enterprise enterprise;
    private User user;
    private List<Product> products;
    /**
     * Creates new form SelectProductsJPanel
     */
    public SelectProductsJPanel(JPanel upc, User user, Customer customer, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.upc = upc;
        this.customer = customer;
        this.business = business;
        this.user = user;
        this.flight = user.getEmployee().getFlight();
        this.enterprise = enterprise;
        products = new ArrayList<>();
    }

    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        model.setRowCount(0);
        
        for (Product product : user.getEmployee().getProducts()){
            Object[] row = new Object[4];
            row[0] = product;
            row[1] = product.getSupplierName();
            row[2] = product.getSellPrice();
            row[3] = product.getNum();
            model.addRow(row);
        }
    }
    
    public void populateSelectedTable(){
        DefaultTableModel model = (DefaultTableModel) customerProductTable.getModel();
        model.setRowCount(0);
        
        for (Product product : products){
            Object[] row = new Object[4];
            row[0] = product;
            row[1] = product.getSupplierName();
            row[2] = product.getSellPrice();
            row[3] = product.getNum();
            model.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        customerProductTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();

        jLabel2.setText("Quantity");

        jButton2.setText("Return");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Supplier", "Price", "Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(productTable);

        customerProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Supplier", "Price", "Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(customerProductTable);

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(jLabel2)
                        .addGap(22, 22, 22)
                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        boolean alreadyHas = false;
        int selectedRow = productTable.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select a Row");
            return;
        }
        Product selectedProduct = (Product)productTable.getValueAt(selectedRow, 0);
        int quantity = (Integer) quantitySpinner.getValue();
        if(quantity <= 0){
            JOptionPane.showMessageDialog(null, "Quantity can not be less than 1");
            return;
        }else if(quantity > selectedProduct.getNum()){
            JOptionPane.showMessageDialog(null, "There are not enough products");
            return;
        }
        for(Product pro : products){
            if(pro.getName().equals(selectedProduct.getName()) &&
                pro.getSupplierName().equals(selectedProduct.getSupplierName())){
                pro.setNum(pro.getNum()+quantity);
                alreadyHas = true;
            }
        }
        if(!alreadyHas){
            Product customerProduct = new Product(selectedProduct.getName(),selectedProduct.getOriginPrice(), selectedProduct.getSellPrice(), 
                    quantity,selectedProduct.getSize(),selectedProduct.getSupplierName());
            products.add(customerProduct);
        }
        int leftNumber = selectedProduct.getNum() - quantity;
        if(leftNumber == 0 ){
            user.getEmployee().getProducts().remove(selectedProduct);
        }else{
            selectedProduct.setNum(leftNumber);
        }

        populateTable();
        populateSelectedTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        boolean alreadyHas = false;
        int selectedRow = productTable.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select a Row");
            return;
        }
        Product selectedProduct = (Product)productTable.getValueAt(selectedRow, 0);
        int quantity = (Integer) quantitySpinner.getValue();
        if(quantity <= 0){
            JOptionPane.showMessageDialog(null, "Quantity can not be less than 1");
            return;
        }else if(quantity > selectedProduct.getNum()){
            JOptionPane.showMessageDialog(null, "There are not enough products");
            return;
        }
        for(Product pro : products){
            if(pro.getName().equals(selectedProduct.getName()) &&
                pro.getSupplierName().equals(selectedProduct.getSupplierName())){
                pro.setNum(pro.getNum()+quantity);
                alreadyHas = true;
            }
        }
        if(!alreadyHas){
            Product customerProduct = new Product(selectedProduct.getName(),selectedProduct.getOriginPrice(), selectedProduct.getSellPrice(), 
                    quantity,selectedProduct.getSize(),selectedProduct.getSupplierName());
            products.add(customerProduct);
        }
        int leftNumber = selectedProduct.getNum() - quantity;
        if(leftNumber == 0 ){
            user.getEmployee().getProducts().remove(selectedProduct);
        }else{
            selectedProduct.setNum(leftNumber);
        }

        populateTable();
        populateSelectedTable();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable customerProductTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    // End of variables declaration//GEN-END:variables
}
